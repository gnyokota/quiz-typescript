{"version":3,"sources":["randomShuffle.ts","API.ts","components/QuestionCard.tsx","App.tsx","index.tsx"],"names":["shuffleArray","array","i","length","j","Math","floor","random","fetchQuiz","amount","difficulty","a","endpoint","fetch","response","json","catch","error","console","log","data","APIdata","results","map","question","answers","incorrect_answers","correct_answer","QuestionCard","checkAnswerFunction","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","disabled","undefined","correctAnswer","value","onClick","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","correct","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","numberQuestions","userLevel","parameters","setParameters","fetchData","newQuestions","useEffect","onSubmit","event","preventDefault","onChange","targetLevel","currentTarget","targetNumber","type","toUpperCase","e","prevScore","answersState","prevState","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8d4c776.chunk.js","sourcesContent":["export const shuffleArray = (array: any[]) =>{\r\n    for (let i:number = array.length -1; i>0; i--){\r\n        const j:number = Math.floor(Math.random()*(i+1)); \r\n        [array[i], array[j]]= [array[j], array[i]]\r\n    }\r\n    return array; \r\n}","import {shuffleArray} from './randomShuffle';\r\n\r\nexport type Question ={\r\n    category: string; \r\n    correct_answer: string; \r\n    difficulty: string; \r\n    incorrect_answers: string[]; \r\n    question: string; \r\n    type: string; \r\n}\r\n\r\nexport type QuestionsState = Question & {answers: string[]};\r\n\r\n\r\n\r\nexport const fetchQuiz = async(amount:number, difficulty: string) =>{\r\n    const endpoint=\r\n    `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n\r\n    //Here we need to awaits because the first one waits for the fetch\r\n    //fetch return a promise, but with await we get the response\r\n    //the second waits for the JSON conversion.\r\n        const response = await (fetch(endpoint))\r\n        const data= await response.json()\r\n        .catch(error => console.log(\"error:\", error));\r\n\r\n    const APIdata = (data.results.map((question: Question)=>{\r\n        return {...question, answers: shuffleArray([...question.incorrect_answers, question.correct_answer])};\r\n    }));\r\n    return APIdata;\r\n}; ","import React from 'react';\r\nimport {AnswersState} from '../App';\r\n//SCSS\r\nimport './QuestionCard.scss';\r\n\r\ntype Props={\r\n        question: string; \r\n        answers: string[];\r\n        checkAnswerFunction: (e: React.MouseEvent<HTMLButtonElement>)=>void;\r\n        userAnswer: AnswersState | undefined; \r\n        questionNr:number;\r\n        totalQuestions:number; \r\n}\r\n\r\n//In there is a generic type called FC that allows us \r\n//to type our function components\r\n\r\nconst QuestionCard = ({\r\n        question,\r\n        answers,\r\n        checkAnswerFunction,\r\n        userAnswer,\r\n        questionNr, \r\n        totalQuestions}: Props) => {\r\n                console.log(userAnswer);\r\n        return(\r\n        <div>\r\n            <p className='quiz-questionNr'>\r\n                  Question: {questionNr} | {totalQuestions}  \r\n            </p>\r\n            {/* If in React if you have to set HTML programmatically  */}\r\n            {/* or from an external source, you would have to use  */}\r\n            {/* dangerouslySetInnerHTML */}\r\n            {/* While using dangerouslySetInnerHTML,  */}\r\n            {/* you will have to pass an object with a __html key. */}\r\n            <div className='questions-wrapper'>\r\n            <p  className='quiz-question' dangerouslySetInnerHTML={{__html: (question)}}></p>\r\n                <div>\r\n                {answers.map(answer=>{\r\n                        return(\r\n                        <div key={answer}>\r\n                        {/* if we have userAnswer we disable the other buttons */}\r\n                         <button disabled={userAnswer? true: false}\r\n                        className={userAnswer !== undefined && answer === userAnswer.correctAnswer\r\n                                ? 'questions-btn correct': \"questions-btn false\"}\r\n                         value={answer}\r\n                         onClick={checkAnswerFunction}>\r\n                                <span dangerouslySetInnerHTML={{__html:(answer)}}></span>   \r\n                        </button>\r\n                        </div>\r\n                        )\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        ) \r\n}\r\n\r\n\r\nexport default QuestionCard;\r\n","import React, { useState, useEffect } from 'react';\nimport {fetchQuiz} from './API';\n//components\nimport QuestionCard from './components/QuestionCard'\n//types\nimport {QuestionsState} from './API';\n//SCSS\nimport './App.scss';\n\n\nexport type AnswersState={\n  question: string; \n  answer: string; \n  correct: boolean; \n  correctAnswer: string;\n}\n\nfunction App() {\n  const [loading, setLoading]= useState(false); \n  const [questions,setQuestions]= useState<QuestionsState[]>([]);\n  const [number,setNumber]= useState(0);\n  const[userAnswers, setUserAnswers]= useState<AnswersState[]>([{\n    question: '',\n    answer: '' ,\n    correct: false ,\n    correctAnswer: ''\n  }]);\n  const [score,setScore]= useState(0); \n  const [gameOver, setGameOver] = useState(true);\n  const [parameters, setParameters] = useState({\n    numberQuestions: 1, \n    userLevel: '',\n  });\n  \n\n  const levelQuiz = (event: React.ChangeEvent<HTMLSelectElement>) =>{\n    const targetLevel=event.currentTarget.value;\n    setParameters({...parameters, userLevel:targetLevel });\n  }\n\n  const numberQuiz = (event: React.ChangeEvent<HTMLSelectElement>) =>{\n    const targetNumber = +event.currentTarget.value;\n    setParameters({...parameters, numberQuestions: targetNumber });\n  }\n\n  const fetchData= async()=>{\n    const newQuestions = await fetchQuiz(parameters.numberQuestions, parameters.userLevel);\n    setQuestions(newQuestions);\n  }\n\n  useEffect(()=>{\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    fetchData()},[gameOver] );\n\n\n  const handleSubmit = (event: any) =>{\n    event.preventDefault();\n    //when we start we initiate the fetch\n    setLoading(true); \n    //and we do not have a game over \n    setGameOver(false);\n    setScore(0); \n    setUserAnswers([]); \n    setNumber(0); \n    setLoading(false);\n  }\n\n  const checkAnswer =(e: React.MouseEvent<HTMLButtonElement>)=>{\n     if(!gameOver){\n       //user answer\n       //currentTarget is the element that the event is attached to. \n       const answer = e.currentTarget.value; \n        //check if the answer is correct\n        const correct = questions[number].correct_answer === answer;\n        //add score if answer is correct\n        if(correct){\n          setScore(prevScore => prevScore+1);\n        }\n        //save answer in the userAnswers\n        const answersState = {\n          question: questions[number].question,\n          answer: answer, \n          correct: correct,\n          correctAnswer: questions[number].correct_answer,\n        }\n        setUserAnswers(prevState => [...prevState, answersState]);\n      }\n     \n  }\n\n  const nextQuestion = () =>{\n    //move on to the next questions if not the last question\n    const nextQuestion = number + 1;\n    if(userAnswers.length === parameters.numberQuestions){\n      setGameOver(true);\n    }else{\n      setNumber(nextQuestion);\n    }\n  }\n\n  const playAgain =() =>{\n     //and we do not have a game over \n     setGameOver(true);\n     setParameters({...parameters, numberQuestions:1,  userLevel: ''});\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1 className='quiz-title'>Quiz</h1>\n    {gameOver ?\n    (<form className='quiz-form' onSubmit={handleSubmit}>\n      <label>\n        Choose the level: \n      </label>\n      <select className='quiz-level' value={parameters.userLevel} onChange={levelQuiz}>\n        <option value=\"\">---</option>\n        <option value=\"easy\">Easy</option>\n        <option value=\"medium\">Medium</option>\n        <option value=\"hard\">Difficult</option>\n      </select>\n      <label>\n        Choose the # of questions: \n      </label>\n      <select className='quiz-number' value={parameters.numberQuestions} onChange={numberQuiz}>\n        <option value=\"\">---</option>\n        <option value=\"10\">10</option>\n        <option value=\"20\">20</option>\n        <option value=\"30\">30</option>\n        </select>\n      <button className='start btn' type='submit'>START</button>\n    </form>) : null}\n     {!gameOver? <p className='level'>Level: {parameters.userLevel.toUpperCase()}</p> : null}\n      {!gameOver? <p className={score%2? 'score-even': 'score-odd'}>Score: {score}</p> : null}\n      {loading ? <p>Loding Questions<span>...</span></p> : null }\n      {!loading && !gameOver? \n      <QuestionCard \n      totalQuestions={parameters.numberQuestions}\n      question={questions[number].question}\n      answers={questions[number].answers}\n      userAnswer={userAnswers? userAnswers[number] : undefined}\n      checkAnswerFunction={checkAnswer}\n      questionNr={number + 1}\n      /> \n      : null}\n     {!gameOver && !loading && \n     userAnswers.length === number+1 && number !== (parameters.numberQuestions -1) ?\n     <button className='next btn' onClick={nextQuestion}>NEXT</button> :\n     null\n     }\n\n  {!gameOver && !loading && userAnswers.length === (parameters.numberQuestions) ?\n    <button className='next btn' onClick={playAgain}>PLAY AGAIN</button> :\n    null\n    }\n    </div>  \n  );\n}\n\nexport default App;\n\n\n// https://opentdb.com/api.php?amount=10&type=multiple\n//www.youtube.com/watch?v=QO4NXhWo_NM \n//www.youtube.com/watch?v=XO77Fib9tSI","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}